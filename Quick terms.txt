BASICS
JavaScript - интерпритируемый (код выполняется внутри программы - браузер), слаботипизированный язык, прототипный, синхронный (одна задача в один момент), со сборкой мусора
Стандарт - ECMAScript

Примитивы иммутабельны, объекты - мутабельны

Объект - ссылка

Сохранение простых переменных, объектов, массивов - memory heap

Вызов функции - заход в Call stack


"use strict"; - директива (ES5) для избежания ошибок совместимости

Стрелочные функции
Не имеют this, super

JSON

JSON.stringify

Литеральный объект


Дескриптор - 
__proto__ – способ доступа к свойству [[Prototype]]
Доступ к прототипу:
Object.create(proto[, descriptors])
Object.getPrototypeOf(obj)
Object.setPrototypeOf(obj, proto) 

Полифил – эмуляция метода

КЛАССЫ

Класс - способ создания объектов одного вида,  разновидность функции и синтаксический сахар
extends - наследование класса
super - вызывает родительский метод
static - присваивание метода/свойства классу, а не прототипу. Не наследуются

Инкапсуляция - отделение внутреннего интерфейса от внешнего
 
Защищённые свойства начинаются с префикса _
Приватные свойства начинаются с префикса #

--------------------------------------------

ХРАНЕНИЕ ДАННЫХ

Куки - строки данных, сохраняемые в браузере
localStorage/sessionStorage - сохранение в браузере

localStorage - общее хранилище
sessionStorage -работает на текущей вкладке

Ключи и значения - строки

IndexedDB - встроенная база данных, мощнее localStorage

--------------------------------------------

DOM

DOM - содержимое страницы в виде объектов;
BOM - дополнительные объекты, всё кроме документа;

DOM представляет HTML-документ в виде дерева тегов
null - нет такого узла
childNodes - все дети, представлены коллекцией (перебор for of/ Array.from)
firstChild / LastChild
nextSibling / previousSibling
Работа только с узлами (без текста) добавляется слово Element (firstElementChild)

createElement(tag) --> createTextNode('Text')
Вставка:
elem.insertAdjacentText(where, text) | elem.insertAdjacentElement(where, elem)

Полоса прокрутки "съедает место"
Точные размеры узнаются при помощи:
offsetParent - ближайший CSS родитель
offsetLeft/offsetTop - от угла
offsetWidth/offsetHeight - с рамками

document.documentElement.clientWidth/Height - размеры документа

addEventListener - несколько обработчиков
Всплытие - срабатывание обработчиков по очереди
event.stopPropagation(); - прекратить всплытие
Делегирование - вешаем обработчик на общий элемент 



 
